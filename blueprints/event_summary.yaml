blueprint:
  name: AI Event Summary (v1.4.0) - Fixed
  author: valentinfrlch (Modified for Fixes)
  description: >
    AI-powered summaries for security camera events.
    Sends a notification with a preview to your phone that is updated dynamically when the AI summary is available.
  domain: automation
  source_url: https://github.com/valentinfrlch/ha-llmvision/blob/main/blueprints/event_summary.yaml
  input:
    important:
      name: Important (Experimental)
      description: >
        Use AI to classify events as Critical, Normal, or Low.
        Notifications are sent only for events classified as Normal or higher.
        Critical events override 'Do Not Disturb' settings.
        Use with caution: AI can make mistakes.
      default: false
      selector:
        boolean:
    remember:
      name: Remember
      description: Stores this event in the Timeline so you can ask about it. If important is enabled, only events classified as Normal or Critical will be saved.
      default: false
      selector:
        boolean:
    use_memory:
      name: Use Memory
      description: 'Use information stored in memory to provide additional context. Memory must be set up.'
      default: false
      selector:
        boolean:
    message:
      name: Prompt
      description: Model prompt for the video_analyzer action
      default: "Summarize the events based on a series of images captured at short intervals. Focus only on moving subjects such as people, vehicles, and other active elements. Ignore static objects and scenery. Provide a clear and concise account of movements and interactions. If no movement is detected, respond with: 'No activity observed.'"
      selector:
        text:
          multiline: true
    notify_device:
      name: Notify Device
      description: The devices to send the notification to. Only works with Home Assistant mobile app.
      default: []
      selector:
        device:
          multiple: true
          filter:
            integration: mobile_app
    camera_entities:
      name: Camera Entities
      description: List of camera entities to monitor
      default: []
      selector:
        entity:
          multiple: true
          filter:
            domain: camera
    motion_sensors:
      name: Motion Sensors
      description: List of motion sensors linked to cameras
      default: []
      selector:
        entity:
          multiple: true
          filter:
            domain: binary_sensor
    preview_mode:
      name: Preview Mode
      description: "Choose between a live preview or a snapshot of the event."
      default: Snapshot
      selector:
        select:
          options:
            - Snapshot
            - Live Preview
    duration:
      name: Duration
      description: Duration to record for analysis (in seconds).
      default: 5
      selector:
        number:
          min: 1
          max: 60
    max_frames:
      name: Max Frames
      description: How many frames to analyze. Picks frames with the most movement.
      default: 3
      selector:
        number:
          min: 1
          max: 60
    provider:
      name: Provider
      description: Provider to use for analysis.
      selector:
        config_entry:
          integration: llmvision
    model:
      name: Model
      description: Which model to use. Depends on the chosen provider.
      default: "gpt-4o-mini"
      selector:
        text:
          multiline: false

variables:
  notify_devices: !input notify_device
  camera_entities_list: !input camera_entities
  motion_sensors_list: !input motion_sensors
  camera_entity: >
    {% if trigger is defined and trigger.entity_id is defined %}
      {% if motion_sensors_list and not trigger.entity_id.startswith("camera") %}
        {% set index = motion_sensors_list.index(trigger.entity_id) %}
        {{ camera_entities_list[index] }}
      {% else %}
        {{ trigger.entity_id }}
      {% endif %}
    {% else %}
      ""
    {% endif %}
  snapshot_url: >
    {% if camera_entity != "" %}
      http://192.168.0.179:5055/api/{{ camera_entity.replace("camera.", "") }}/latest.jpg
    {% else %}
      ""
    {% endif %}

triggers:
  - platform: state
    entity_id: !input camera_entities
    to: 'recording'
    id: 'camera_trigger'
  - platform: state
    entity_id: !input motion_sensors
    to: 'on'
    id: 'motion_sensor_trigger'

condition: []

action:
  - alias: "Check if snapshot URL is available"
    condition: template
    value_template: "{{ snapshot_url is not none and snapshot_url != '' }}"

  - alias: "Analyze image using LLM Vision"
    service: assist_pipeline.run
    data:
      input: "Describe this image."
      media_player: []
      image: "{{ snapshot_url }}"
    response_variable: llm_result

  - alias: "Ensure LLM Response Exists"
    condition: template
    value_template: "{{ llm_result is not none and llm_result.get('response_text') is not none }}"

  - alias: "Send AI Notification"
    repeat:
      for_each: "{{ notify_devices }}"
      sequence:
        - service: "notify.mobile_app_{{ repeat.item }}"
          data:
            title: "ðŸ”” Frigate Alert: Motion Detected"
            message: "{{ llm_result.response_text }}"
            data:
              image: "{{ snapshot_url }}"
              clickAction: "{{ snapshot_url }}"

  - alias: "Debugging Log"
    service: persistent_notification.create
    data:
      title: "Debugging AI Event"
      message: "Snapshot: {{ snapshot_url }}\n\nLLM Response: {{ llm_result }}"
